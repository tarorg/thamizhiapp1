---
import { createClient } from '@libsql/client/web';
import { Groq } from 'groq-sdk';

// Initialize Groq client
const groq = new Groq({
  apiKey: import.meta.env.GROQ_API_KEY,
});

// Initialize Turso client
const db = createClient({
  url: "libsql://thamizhiapp-thamizhiorg.turso.io",
  authToken: "eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJhIjoicnciLCJpYXQiOjE3MjcyOTAwMzMsImlkIjoiMzczMmY0YTQtZDdmNi00OTAyLTg5NTItNDM4MTdiODIwMmZjIn0.wgkfQkCUVSxzqb0tQHtxrigmWLIsFL4QW6p4B19Thz3MMCi1O37K0evuDy2u4YDxfTm4ADndFs1nIE-d-4GzBg"
});

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
}

let chatHistory: ChatMessage[] = [];

---

<div class="container mx-auto px-4 py-8">
 
  <div class="flex h-[97vh] w-full flex-col">
    <!-- Prompt Messages -->
    <div id="chat-messages" class="flex-1 overflow-y-auto rounded-xl bg-gray-100 p-4 text-sm leading-6 text-gray-800 sm:text-base sm:leading-7">
      {chatHistory.map((message, index) => (
        <div class={`flex ${message.role === 'user' ? 'flex-row' : 'flex-row-reverse'} px-2 py-4 sm:px-4`}>
          <img
            class={`${message.role === 'user' ? 'mr-2 sm:mr-4' : 'ml-2 sm:ml-4'} flex h-8 w-8 rounded-full`}
            src={`https://dummyimage.com/256x256/${message.role === 'user' ? '363536/ffffff&text=U' : '4a90e2/ffffff&text=A'}`}
          />
          <div class={`flex max-w-3xl items-center ${message.role === 'assistant' ? 'bg-white rounded-xl px-4 py-2 shadow' : ''}`}>
            <p>{message.content}</p>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Prompt message input -->
    <form id="chat-form" class="mt-2">
      <label for="chat-input" class="sr-only">Enter your prompt</label>
      <div class="relative">
        <button
          type="button"
          class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400 hover:text-blue-500"
        >
          <svg
            aria-hidden="true"
            class="h-5 w-5"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
            stroke-width="2"
            stroke="currentColor"
            fill="none"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path
              d="M9 2m0 3a3 3 0 0 1 3 -3h0a3 3 0 0 1 3 3v5a3 3 0 0 1 -3 3h0a3 3 0 0 1 -3 -3z"
            ></path>
            <path d="M5 10a7 7 0 0 0 14 0"></path>
            <path d="M8 21l8 0"></path>
            <path d="M12 17l0 4"></path>
          </svg>
          <span class="sr-only">Use voice input</span>
        </button>
        <textarea
          id="chat-input"
          name="question"
          class="block w-full resize-none rounded-xl border border-gray-300 bg-white p-4 pl-10 pr-20 text-sm text-gray-900 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 sm:text-base"
          placeholder="Enter your prompt"
          rows="1"
          required
        ></textarea>
        <button
          type="submit"
          class="absolute bottom-2 right-2.5 rounded-lg bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 sm:text-base"
        >
          Send <span class="sr-only">Send message</span>
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  const chatForm = document.getElementById('chat-form');
  const chatInput = document.getElementById('chat-input') as HTMLTextAreaElement;
  const chatMessages = document.getElementById('chat-messages');

  chatForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const question = chatInput.value.trim();
    if (!question) return;

    // Add user message to chat
    addMessageToChat('user', question);
    chatInput.value = '';

    try {
      // Send request to server
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ question }),
      });

      if (response.ok) {
        const { answer } = await response.json();
        addMessageToChat('assistant', answer);
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || 'An unknown error occurred');
      }
    } catch (error) {
      console.error('Error:', error);
      addMessageToChat('assistant', `Sorry, an error occurred: ${error.message}`);
    }
  });

  function addMessageToChat(role: 'user' | 'assistant', content: string) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `flex ${role === 'user' ? 'flex-row' : 'flex-row-reverse'} px-2 py-4 sm:px-4`;
    messageDiv.innerHTML = `
      <img
        class="${role === 'user' ? 'mr-2 sm:mr-4' : 'ml-2 sm:ml-4'} flex h-8 w-8 rounded-full"
        src="https://dummyimage.com/256x256/${role === 'user' ? '363536/ffffff&text=U' : '4a90e2/ffffff&text=A'}"
      />
      <div class="flex max-w-3xl items-center ${role === 'assistant' ? 'bg-white rounded-xl px-4 py-2 shadow' : ''}">
        <p>${content}</p>
      </div>
    `;
    chatMessages?.appendChild(messageDiv);
    chatMessages?.scrollTo(0, chatMessages.scrollHeight);
  }
</script>
