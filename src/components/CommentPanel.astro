---
// No server-side logic needed here, as we'll load comments dynamically
---

<aside id="comment-panel" class="hidden fixed inset-y-0 right-0 w-full sm:w-96 bg-white border-l border-gray-200 p-4 overflow-y-auto z-50">
  <button id="close-comments" class="absolute top-2 right-2 text-gray-500 hover:text-gray-700">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
    </svg>
  </button>
  <h2 class="text-lg font-semibold mb-3">Comments</h2>
  <div id="comments-container" class="space-y-3">
    <!-- Comments will be loaded here dynamically -->
  </div>
  <div class="mt-3 sticky bottom-0 bg-white pt-2">
    <textarea id="comment-input" class="w-full p-2 border rounded text-sm" placeholder="Add a comment..."></textarea>
    <button id="submit-comment" class="mt-2 bg-blue-500 text-white px-3 py-1 rounded text-sm">Post</button>
  </div>
</aside>

<script>
  let currentPostId: string | null = null;

  document.addEventListener('DOMContentLoaded', () => {
    const commentPanel = document.getElementById('comment-panel') as HTMLElement;
    const commentsContainer = document.getElementById('comments-container') as HTMLElement;
    const commentInput = document.getElementById('comment-input') as HTMLTextAreaElement;
    const submitCommentButton = document.getElementById('submit-comment') as HTMLButtonElement;
    const closeCommentsButton = document.getElementById('close-comments') as HTMLButtonElement;

    document.addEventListener('loadComments', ((event: CustomEvent) => {
      currentPostId = event.detail.postId;
      if (currentPostId) {
        loadComments(currentPostId);
      }
      commentPanel.scrollTop = 0;
      commentPanel.classList.remove('hidden');
    }) as EventListener);

    submitCommentButton.addEventListener('click', () => {
      if (currentPostId && commentInput.value.trim() !== '') {
        submitComment(currentPostId, commentInput.value);
      }
    });

    closeCommentsButton.addEventListener('click', () => {
      commentPanel.classList.add('hidden');
    });

    async function loadComments(postId: string) {
      commentsContainer.innerHTML = 'Loading comments...';
      try {
        const response = await fetch(`https://thamizhi.xyz/api/v1/statuses/${postId}/context`);
        const data = await response.json();
        displayComments(data.descendants);
      } catch (error) {
        console.error('Error loading comments:', error);
        commentsContainer.innerHTML = 'Failed to load comments.';
      }
    }

    function displayComments(comments: any[]) {
      commentsContainer.innerHTML = comments.length > 0
        ? comments.map(comment => `
          <div class="pb-2 border-b border-gray-200">
            <div class="flex items-center mb-1">
              <img src="${comment.account.avatar}" alt="${comment.account.display_name}" class="w-6 h-6 rounded-full mr-2">
              <p class="font-semibold text-sm">${comment.account.display_name}</p>
            </div>
            <p class="text-sm">${comment.content}</p>
          </div>
        `).join('')
        : '<p class="text-sm text-gray-500">No comments yet.</p>';
    }

    async function submitComment(postId: string, content: string) {
      try {
        const accessToken = localStorage.getItem('mastodon_access_token');
        if (!accessToken) {
          throw new Error('Mastodon account not connected');
        }

        const response = await fetch(`https://thamizhi.xyz/api/v1/statuses`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ status: content, in_reply_to_id: postId })
        });

        if (response.ok) {
          commentInput.value = '';
          await loadComments(postId); // Reload comments after posting
          commentPanel.scrollTop = commentPanel.scrollHeight; // Scroll to the bottom
        } else {
          throw new Error('Failed to post comment');
        }
      } catch (error) {
        console.error('Error posting comment:', error);
        alert('Failed to post comment. Please try again.');
      }
    }
  });
</script>