---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import { NhostClient } from '@nhost/nhost-js';

const nhost = new NhostClient({
  subdomain: import.meta.env.PUBLIC_NHOST_SUBDOMAIN,
  region: import.meta.env.PUBLIC_NHOST_REGION
});

// We'll fetch user data client-side to ensure we have the latest session
let userData = null;
let authError = null;
---

<Layout title="Settings - Journalism App">
  <Header />
  <main class="max-w-3xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
    <h1 class="text-2xl font-semibold text-gray-900 mb-6">Settings</h1>
    <div id="user-data-container" class="space-y-8">
      <p class="text-gray-500">Loading user data...</p>
    </div>
    
    <div class="space-y-8 mt-8">
      <div>
        <h2 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18z"></path>
            <path d="M12 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path>
          </svg>
          Preferences
        </h2>
        <button id="theme-toggle" class="flex items-center text-sm text-gray-700 hover:text-gray-900">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
          </svg>
          <span>Switch to Dark Mode</span>
        </button>
      </div>
      
      <div>
        <h2 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path>
          </svg>
          Mastodon Integration
        </h2>
        <div id="mastodon-info" class="text-sm text-gray-700">
          <p>Connect your Mastodon account to interact with our community:</p>
          <p class="font-medium mt-2">Server: thamizhi.xyz</p>
          <div id="mastodon-connection-status" class="mt-2"></div>
          <button id="connect-mastodon" class="mt-2 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
            Connect Mastodon Account
          </button>
        </div>
      </div>
      
      <div>
        <button id="sign-out" class="flex items-center text-sm text-red-600 hover:text-red-800">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
            <polyline points="16 17 21 12 16 7"></polyline>
            <line x1="21" y1="12" x2="9" y2="12"></line>
          </svg>
          <span>Sign Out</span>
        </button>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { NhostClient } from '@nhost/nhost-js';

  const nhost = new NhostClient({
    subdomain: import.meta.env.PUBLIC_NHOST_SUBDOMAIN,
    region: import.meta.env.PUBLIC_NHOST_REGION
  });

  async function fetchUserData() {
    try {
      const isAuthenticated = await nhost.auth.isAuthenticatedAsync();
      console.log('Is authenticated:', isAuthenticated);
      
      if (isAuthenticated) {
        const user = await nhost.auth.getUser();
        console.log('Raw user data:', user);
        
        if (user) {
          const userData = {
            id: user.id,
            email: user.email,
            displayName: user.displayName || user.email.split('@')[0],
            avatarUrl: user.avatarUrl || `https://www.gravatar.com/avatar/${user.id}?d=identicon&s=200`,
            createdAt: user.createdAt,
          };
          console.log('Processed user data:', userData);
          return userData;
        } else {
          console.log('User data is null');
          return null;
        }
      } else {
        console.log('User is not authenticated');
        return null;
      }
    } catch (error) {
      console.error('Error fetching user data:', error);
      throw error;
    }
  }

  async function updateUserDataDisplay() {
    const container = document.getElementById('user-data-container');
    const mastodonConnectionStatus = document.getElementById('mastodon-connection-status');
    if (!container || !mastodonConnectionStatus) return;

    try {
      const userData = await fetchUserData();
      if (userData) {
        container.innerHTML = `
          <div>
            <p class="font-medium text-lg">${userData.displayName}</p>
            <p class="text-gray-500 text-sm">${userData.email}</p>
          </div>
        `;
        // Update profile icon in header
        const profileIcon = document.getElementById('profile-icon');
        if (profileIcon) {
          profileIcon.innerHTML = `<img src="${userData.avatarUrl}" alt="Profile" class="w-8 h-8 rounded-full">`;
        }
        
        // Update Mastodon connection status
        // This is a placeholder. You'll need to implement actual Mastodon connection checking
        mastodonConnectionStatus.textContent = 'Status: Not connected';
      } else {
        container.innerHTML = '<p class="text-gray-500">Not logged in or unable to fetch user data</p>';
        mastodonConnectionStatus.textContent = 'Status: Please log in to connect your Mastodon account';
      }
    } catch (error) {
      container.innerHTML = `<p class="text-red-500">Error: ${error instanceof Error ? error.message : String(error)}</p>`;
      mastodonConnectionStatus.textContent = 'Status: Error fetching data';
    }
  }

  // Call this function when the page loads
  updateUserDataDisplay();

  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  themeToggle?.addEventListener('click', () => {
    document.body.classList.toggle('dark');
    localStorage.setItem('theme', document.body.classList.contains('dark') ? 'dark' : 'light');
    updateThemeButtonText();
  });

  function updateThemeButtonText() {
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      const iconPath = themeToggle.querySelector('svg path');
      const textSpan = themeToggle.querySelector('span');
      if (document.body.classList.contains('dark')) {
        iconPath?.setAttribute('d', 'M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z');
        textSpan && (textSpan.textContent = 'Switch to Light Mode');
      } else {
        iconPath?.setAttribute('d', 'M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z');
        textSpan && (textSpan.textContent = 'Switch to Dark Mode');
      }
    }
  }

  // Sign out functionality
  const signOutButton = document.getElementById('sign-out');
  signOutButton?.addEventListener('click', async () => {
    try {
      await nhost.auth.signOut();
      window.location.href = '/';
    } catch (error) {
      console.error('Error signing out:', error);
    }
  });

  // Check and apply saved theme
  if (localStorage.getItem('theme') === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
    document.body.classList.add('dark');
  } else {
    document.body.classList.remove('dark');
  }
  updateThemeButtonText();

  // Mastodon connection functionality
  const connectMastodonButton = document.getElementById('connect-mastodon');
  connectMastodonButton?.addEventListener('click', async () => {
    try {
      const userData = await fetchUserData();
      if (!userData) {
        alert('Please log in to connect your Mastodon account.');
        return;
      }

      const mastodonConnectionStatus = document.getElementById('mastodon-connection-status');
      if (!mastodonConnectionStatus) return;
      
      mastodonConnectionStatus.textContent = 'Status: Initiating Mastodon connection...';

      // Initiate Mastodon OAuth flow
      const clientId = 'nbmCFlpGO3uFnQxm1rzPzN2NOmlkLwcffkVU6zvlYQc';
      const redirectUri = `${window.location.origin}/mastodon-callback`;
      const scope = 'read write follow';
      const mastodonAuthUrl = `https://thamizhi.xyz/oauth/authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&response_type=code&scope=${encodeURIComponent(scope)}`;
      
      window.location.href = mastodonAuthUrl;

    } catch (error) {
      console.error('Error connecting Mastodon account:', error);
      const mastodonConnectionStatus = document.getElementById('mastodon-connection-status');
      if (mastodonConnectionStatus) {
        mastodonConnectionStatus.textContent = `Status: Error - ${error instanceof Error ? error.message : String(error)}`;
      }
    }
  });

  // Check Mastodon connection status on page load
  async function checkMastodonConnection() {
    const mastodonConnectionStatus = document.getElementById('mastodon-connection-status');
    const connectMastodonButton = document.getElementById('connect-mastodon');
    if (!mastodonConnectionStatus || !connectMastodonButton) return;

    const accessToken = localStorage.getItem('mastodon_access_token');
    if (accessToken) {
      try {
        const response = await fetch('https://thamizhi.xyz/api/v1/accounts/verify_credentials', {
          headers: {
            'Authorization': `Bearer ${accessToken}`
          }
        });
        if (response.ok) {
          const userData = await response.json();
          mastodonConnectionStatus.textContent = `Connected as @${userData.username}`;
          connectMastodonButton.textContent = 'Disconnect Mastodon Account';
        } else {
          throw new Error('Failed to verify Mastodon credentials');
        }
      } catch (error) {
        console.error('Error checking Mastodon connection:', error);
        mastodonConnectionStatus.textContent = 'Status: Not connected';
        localStorage.removeItem('mastodon_access_token');
        connectMastodonButton.textContent = 'Connect Mastodon Account';
      }
    } else {
      mastodonConnectionStatus.textContent = 'Status: Not connected';
      connectMastodonButton.textContent = 'Connect Mastodon Account';
    }
  }

  checkMastodonConnection();
</script>